* programming

  This file contains settings related to programming modes.

** lsp

   [[https://emacs-lsp.github.io/lsp-mode][emacs-lsp]] is a client for Language Server Protocol.

   #+begin_src emacs-lisp
     (use-package lsp-mode
       :ensure t
       :hook (haskell-mode . lsp)
       :commands lsp)

     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode)

   #+end_src

** Haskell

   #+begin_src emacs-lisp
     (use-package lsp-haskell
       :ensure t
       :config
       (setq lsp-haskell-process-path-hie "ghcide")
       (setq lsp-haskell-process-args-hie '())
       )

     (add-hook 'haskell-mode-hook #'lsp)

     (use-package eglot
       :ensure t
       :config
       (add-to-list 'eglot-server-programs '(haskell-mode . ("ghcide" "--lsp"))))
   #+end_src

** AucTeX

   [[https://www.gnu.org/software/auctex/][AUCTeX]] is an extensible package for writing and formatting TeX.

   #+begin_src emacs-lisp
     (use-package tex
       :ensure auctex
       :mode ("\\.tex\\'" . TeX-latex-mode))
   #+end_src

   enable ~-shell-escape~ flag and biblography options

   #+begin_src emacs-lisp
     (setq TeX-command-extra-options "-shell-escape")
     (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

   #+end_src

   setup company backends

   #+begin_src emacs-lisp
     (defun my-latex-mode-setup ()
       (setq-local company-backends
                   (append '((company-reftex-labels
                              company-reftex-citations
                              company-math-symbols-latex
                              company-math-symbols-unicode
                              company-auctex-macros
                              company-auctex-environments))
                           company-backends)))
   #+end_src

   #+begin_src emacs-lisp
     (add-hook 'LaTeX-mode-hook 'my-latex-mode-setup)
     (add-hook 'LaTeX-mode-hook 'reftex-mode)
     (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)

     (setq reftex-plug-into-AUCTeX t)

     (use-package flyspell
       :init   (add-hook 'LaTeX-mode-hook 'flyspell-mode))

     (setq-default ispell-program-name "aspell")


   #+end_src

** nix and nixOS

   configuration for the nix language

   #+begin_src emacs-lisp
     (use-package nix-mode :ensure t)
     (use-package nix-update :ensure t)
     (use-package nix-buffer :ensure t)
   #+end_src

   flycheck configuration

   #+begin_src emacs-lisp
     (setq flycheck-command-wrapper-function
           (lambda (command) (apply 'nix-shell-command (nix-current-sandbox) command))
           flycheck-executable-find
           (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd)))
   #+end_src

   some other utilities for nix

   #+begin_src emacs-lisp
     (use-package nixpkgs-fmt :ensure t)
     (use-package nix-sandbox :ensure t)
   #+end_src

   configuration to edit nixOS configuration files

   #+begin_src emacs-lisp
     (use-package helm-nixos-options :ensure t)
     (use-package nixos-options :ensure t)
     (use-package company-nixos-options :ensure t)
     (add-to-list 'company-backends 'company-nixos-options)
   #+end_src

** prolog

   prolog-mode default mode for ~.pl~ files

   #+begin_src emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
   #+end_src

** Sophia

   #+begin_src emacs-lisp
     ;; (require 'sophia-mode)
   #+end_src

** Erlang

** format all

   #+begin_src emacs-lisp
     (use-package format-all :ensure t)
     (format-all-mode)
   #+end_src
